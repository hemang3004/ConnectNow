{"version":3,"file":"static/js/462.dd639e2a.chunk.js","mappings":"kZAyMA,EApLuB,SAAH,GAAsB,IAAhBA,EAAQ,EAARA,SACxB,GAAoCC,EAAAA,EAAAA,KAA5BC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACxB,GAA0CC,EAAAA,EAAAA,YAAU,eAA7CC,EAAa,KAAEC,EAAgB,KACtC,GAA0CF,EAAAA,EAAAA,UAAS,IAAG,eAA/CG,EAAa,KAAEC,EAAgB,KACtC,GAA4BJ,EAAAA,EAAAA,UAAS,IAAG,eAAjCK,EAAM,KAAEC,EAAS,KACxB,GAAwCN,EAAAA,EAAAA,UAAS,IAAG,eAA7CO,EAAY,KAAEC,EAAe,KACpC,GAA8BR,EAAAA,EAAAA,WAAS,GAAM,eAAtCS,EAAO,KAAEC,EAAU,KAEpBC,GAAQC,EAAAA,EAAAA,KAEd,GAAgDC,EAAAA,EAAAA,KAAxCC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAmBfC,IAnBqC,EAAZC,aAmBb,yCAAG,WAAOC,GAAK,gFACd,GAAjBb,EAAUa,GACLA,EAAM,CAAD,gDAUP,OAVO,SAKRT,GAAW,GACLU,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYR,EAAKS,SAEhC,EAAD,OACsBC,EAAAA,EAAAA,IAAU,oBAAD,OAAqBnB,GAAUe,GAAQ,KAAD,WAA9DK,EAAI,EAAJA,KAERf,GAAW,GACXF,EAAgBiB,GAAM,kDAEtBd,EAAM,CACJe,MAAO,iBACPC,YAAa,oCACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBACT,0DAEN,gBA3BiB,uCAkCZC,GAAY,yCAAG,gGACd/B,GAAkBE,EAAa,gBAO/B,OANHQ,EAAM,CACJe,MAAO,6BACPE,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QACT,0BASF,OATE,SAKGX,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYR,EAAKS,SAEhC,EAAD,OACsBC,EAAAA,EAAAA,KAAW,kBAEhC,CACES,KAAMhC,EACNiC,MAAOC,KAAKC,UAAUjC,EAAckC,KAAI,SAACC,GAAC,OAAKA,EAAEC,GAAG,MAEtDnB,GACA,KAAD,WAPOK,EAAI,EAAJA,KAQRT,EAAS,CAACS,GAAI,eAAKV,KACnBhB,IACAY,EAAM,CACJe,MAAO,0BACPE,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WACT,kDAEHpB,EAAM,CACJe,MAAO,6BACPC,YAAa,KAAMa,SAASf,KAC5BG,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,WACT,0DAEN,kBA7CiB,mCA+ClB,OACE,iCACE,iBAAMU,QAAS3C,EAAO,SAAEH,KAExB,UAAC,KAAK,CAACI,QAASA,EAASF,OAAQA,EAAQ6C,YAAU,aACjD,SAAC,IAAY,KACb,UAAC,IAAY,YACX,SAAC,IAAW,CACVC,SAAS,OACTC,WAAW,YACXC,QAAQ,OACRC,eAAe,SAAQ,SACxB,uBAGD,SAAC,IAAgB,KACjB,UAAC,IAAS,CAACD,QAAQ,OAAOE,QAAQ,SAASC,WAAW,SAAQ,WAC5D,SAAC,KAAW,WACV,SAAC,EAAAC,EAAK,CACJC,YAAY,YACZC,GAAI,EACJC,SAAU,SAACC,GAAC,OAAKnD,EAAiBmD,EAAEC,OAAOC,MAAM,OAGrD,SAAC,KAAW,WACV,SAAC,EAAAN,EAAK,CACJC,YAAY,YACZC,GAAI,EACJC,SAAU,SAACC,GAAC,OAAKpC,GAAaoC,EAAEC,OAAOC,MAAM,OAIjD,SAAC,KAAG,CAACC,EAAE,OAAOX,QAAQ,OAAOY,SAAS,OAAM,SACzCtD,EAAckC,KAAI,SAACC,GAAC,OACnB,SAACoB,EAAA,EAAa,CAEZC,MAAOrB,EACPsB,MAAO9C,EACP+C,eAAgB,kBA1FVC,EA0F6BxB,OAzFjDlC,EAAiBD,EAAc4D,QAAO,SAACC,GAAG,OAAKA,EAAIzB,MAAQuB,EAAQvB,GAAG,KADnD,IAACuB,CA0F+B,GAHhCxB,EAAEC,IAIP,MAIL9B,GAEC,yBAAK,eAEO,OAAZF,QAAY,IAAZA,OAAY,EAAZA,EACI0D,MAAM,EAAG,GACV5B,KAAI,SAACvB,GAAI,OACR,SAACoD,EAAA,EAAY,CAEXpD,KAAMA,EACN+C,eAAgB,kBAtJbM,EAsJ+BrD,OArJ9CX,EAAciE,SAASD,GACzBxD,EAAM,CACJe,MAAO,qBACPE,OAAQ,UACRC,SAAU,IACVC,YAAY,EACZC,SAAU,QAKd3B,EAAiB,GAAD,eAAKD,GAAa,CAAEgE,MAZlB,IAACA,CAsJoC,GAFlCrD,EAAKyB,IAGV,QAKV,SAAC,IAAW,WACV,SAAC,IAAM,CAACE,QAAST,GAAcqC,YAAY,OAAM,SAAC,0BAQ9D,E,6GC3HA,EA3CqB,WACnB,OAOIxD,EAAAA,EAAAA,KANFyD,EAAe,EAAfA,gBACAxD,EAAI,EAAJA,KACAyD,EAAY,EAAZA,aACAC,EAAe,EAAfA,gBACK,EAALzD,MACQ,EAARC,SAEF,OACE,0BACE,UAAC,IAAI,YACH,UAAC,IAAU,CAACyD,EAAE,IAAG,WACf,SAACC,EAAA,QAAiB,CAChBC,MAAmB,OAAZJ,QAAY,IAAZA,OAAY,EAAZA,EAAcK,OACrBC,OAAQC,EAAAA,GAAAA,SAEV,SAAC,IAAQ,CAACnC,SAAS,MAAMoC,EAAE,UAG7B,UAAC,IAAQ,CAACC,GAAI,GAAG,YAGD,OAAZT,QAAY,IAAZA,GAAAA,EAAcK,SAAU,kBACb,OAAZL,QAAY,IAAZA,OAAY,EAAZA,EAAclC,KAAI,SAAC4C,GAAK,OACvB,SAAC,IAAQ,CAEPxC,QAAS,WACP6B,EAAgBW,EAAMC,MACtBV,EAAgBD,EAAaR,QAAO,SAACoB,GAAC,OAAKA,IAAMF,CAAK,IACxD,EAAE,SAEDA,EAAMC,KAAKE,YAAW,yBACDH,EAAMC,KAAKG,UAAQ,4BACjBC,EAAAA,EAAAA,IAAUxE,EAAMmE,EAAMC,KAAKhD,SAR9C+C,EAAM1C,IASF,WAMvB,E,uCC4DA,EA/HkB,SAAH,GAAwB,IAAlBgD,EAAU,EAAVA,WACnB,GAAiE1E,EAAAA,EAAAA,KAAzDK,EAAY,EAAZA,aAAcoD,EAAe,EAAfA,gBAAiBxD,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SACpD,GAAoChB,EAAAA,EAAAA,YAAU,eAAvCwF,EAAU,KAAEC,EAAa,KAC1B9E,GAAQC,EAAAA,EAAAA,KACR8E,GAAOC,EAAAA,EAAAA,QAAO,IAEdC,EAAa,SAACC,EAAKC,GACvB,OAAkBC,IAAAA,IAAAA,QAAqBD,EAASD,GAAKG,SACnDD,IAAAA,IAAAA,KAEJ,EAEME,EAAU,yCAAG,6FAQf,OARe,SAET7E,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYR,EAAKS,SAIlC,SACuBC,EAAAA,EAAAA,IAAU,YAAaJ,GAAQ,KAAD,WAA7CK,EAAI,EAAJA,KACRT,EAASS,GAAM,gDAEfd,EAAM,CACJe,MAAO,iBACPC,YAAa,2BACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBACT,yDAEN,kBArBe,mCAuBVmE,EAAiB,SAAChB,GACtB,OAAOhE,GAAgBA,EAAaqB,MAAQ2C,EAAK3C,GACnD,EAMM4D,EAAiB,SAACjB,GACtB,OAAIgB,EAAehB,IALK,SAACA,GAAU,IAAD,IAClC,OAAyB,QAAlB,EAAAA,EAAKkB,qBAAa,OAAQ,QAAR,EAAlB,EAAoBC,cAAM,WAAR,EAAlB,EAA4BC,MAAOxF,EAAKyB,GACjD,CAIWgE,CAAkBrB,GAAQ,UAE1B,SAEX,EAEMsB,EAAmB,SAACtB,GACxB,OAAOgB,EAAehB,GAAQ,QAAU,OAC1C,GAEAuB,EAAAA,EAAAA,YAAU,WACRhB,EAActD,KAAKuE,MAAMC,aAAaC,QAAQ,cAC9CX,GACF,GAAG,CAACV,IAMJ,OACE,SAAC,IAAK,CAACsB,UAAU,SAAQ,SACtB9F,EAAMsB,KAAI,SAAC6C,EAAM4B,GAAW,IAAD,QACtBC,EAAW,GAMf,OALI,OAAJ7B,QAAI,IAAJA,GAAAA,EAAM6B,SAASC,SAAQ,SAACC,GAClBA,EAAQC,cAAgBC,OAAOrG,EAAKyB,OACtCwE,EAAWE,EAAQG,SAEvB,KAEE,UAAC,KAAG,CACFC,IAAK,SAACC,GAAE,OAAM5B,EAAK6B,QAAQT,GAASQ,CAAE,EACtC7E,QAAS,WACP6B,EAAgBY,GAlBD,SAAC4B,GAC1B,IAAIU,EAAM9B,EAAK6B,QAAQT,GAAOW,iBAAiB,KAC/CD,EAAI,GAAGE,MAAMC,WAAa,SAC1BH,EAAI,GAAGE,MAAMC,WAAa,QAC5B,CAeYC,CAAmBd,EACrB,EACAe,OAAO,UAGPC,GAAI3B,EAAejB,GACnB6C,MAAOvB,EAAiBtB,GACxB8C,GAAI,EACJC,GAAI,EACJC,aAAa,KAAI,WAGjB,SAAC,IAAI,UACDhD,EAAKE,YAEHF,EAAKG,UADLC,EAAAA,EAAAA,IAAUE,EAAYN,EAAKhD,SAGhCgD,EAAKkB,gBACJ,UAAC,IAAI,CAACzD,SAAS,KAAI,WACjB,UAAC,IAAI,CACHgF,WACEZ,GAAe,OAAJ7B,QAAI,IAAJA,GAAmB,QAAf,EAAJA,EAAMkB,qBAAa,WAAf,EAAJ,EAAqB+B,MAAO,OAAS,SAElDtF,QAAS,SAAS,UAEb,OAAJqC,QAAI,IAAJA,GAAmB,QAAf,EAAJA,EAAMkB,qBAAa,OAAQ,QAAR,EAAnB,EAAqBC,cAAM,WAAvB,EAAJ,EAA6BpE,KAAK,KAAG,QAExC,SAAC,IAAI,CACH0F,WACEZ,GAAe,OAAJ7B,QAAI,IAAJA,GAAmB,QAAf,EAAJA,EAAMkB,qBAAa,WAAf,EAAJ,EAAqB+B,MAAO,OAAS,SAElDtF,QAAS,SAAS,SAEjBqC,EAAKkB,cAAcgC,QAAQxD,OAAS,GACjCgB,EACEV,EAAK3C,IACL2C,EAAKkB,cAAcgC,SACnBC,UAAU,EAAG,IAAM,MACrBzC,EAAWV,EAAK3C,IAAK2C,EAAKkB,cAAcgC,gBA5B7ClD,EAAK3C,IAkChB,KAGN,ECdA,EAvGgB,SAAH,GAAwB,IAAlBgD,EAAU,EAAVA,WACjB,GACE1E,EAAAA,EAAAA,KADMK,EAAY,EAAZA,aAA+BJ,GAAF,EAAfwD,gBAAqB,EAAJxD,MAAMC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAUsH,EAAM,EAANA,OAE9D,GAAoCtI,EAAAA,EAAAA,YAAU,eAA3ByF,GAAF,KAAe,MAE1B9E,GAAQC,EAAAA,EAAAA,KAERqF,EAAU,yCAAG,6FASf,OATe,SAGT7E,EAAS,CACbC,QAAS,CACPC,cAAc,UAAD,OAAYR,EAAKS,SAIlC,SACuBC,EAAAA,EAAAA,IAAU,YAAaJ,GAAQ,KAAD,WAA7CK,EAAI,EAAJA,KACRT,EAASS,GAAM,gDAEfd,EAAM,CACJe,MAAO,iBACPC,YAAa,2BACbC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZC,SAAU,gBACT,yDAEN,kBAtBe,mCAkChB,OATA0E,EAAAA,EAAAA,YAAU,WACRR,GAEF,GAAG,CAACqC,KACJ7B,EAAAA,EAAAA,YAAU,WACRhB,EAActD,KAAKuE,MAAMC,aAAaC,QAAQ,cAC9CX,GACF,GAAG,CAACV,KAGF,UAAC,KAAG,CACF1C,QAAS,CAAE0F,KAAMrH,EAAe,OAAS,OAAQsH,GAAI,QACrDzF,QAAQ,SACRC,WAAW,SACXyB,EAAG,EACHqD,GAAG,QACHtE,EAAG,CAAE+E,KAAM,OAAQC,GAAI,OACvBC,GAAI,EACJC,YAAY,MACZC,OAAQ,OAAO,WAEf,UAAC,KAAG,CAAC9F,QAAQ,OAAOC,eAAgB,eAAe,WACnD,SAAC,KAAG,CACF8F,GAAI,EACJZ,GAAI,EACJrF,SAAU,CAAE4F,KAAM,OAAQC,GAAI,QAC9B5F,WAAW,YACXY,EAAE,OACFV,eAAe,gBACfE,WAAW,SACX6F,YAAa,GAAG,SACjB,cAGC,UAAC,KAAG,CAAChG,QAAQ,OAAOiG,WAAY,EAAE,WAC1C,SAAC,EAAc,WAEf,SAAC,IAAO,CAACC,MAAM,iBAAiBC,UAAQ,EAACC,UAAU,aAAY,UAC7D,SAAC,IAAU,CACXpG,QAAQ,OACRF,SAAU,CAAE4F,KAAM,OAAQC,GAAI,OAAQU,GAAI,QAC1CC,MAAM,SAAC,IAAO,WAOhB,SAAC,EAAY,WAKP,SAAC,KAAG,CACFtG,QAAQ,OACRE,QAAQ,SACR0B,EAAG,EACHqD,GAAG,UACHtE,EAAE,OACF4F,EAAE,OACFlB,aAAa,KACbrB,UAAU,SAAQ,SAIjB9F,GAAQ,SAAC,EAAS,CAACwE,WAAYA,KAAiB,SAAC8D,EAAA,EAAW,QAIrE,C,uBC/GAC,OAAOC,eAAeC,EAAS,KAA/BF,CACEG,YAAY,EACZC,IAAK,WACH,OAAOC,EAAiB,OAC1B,IAIF,IAAIC,EAAqBC,EAAuBC,EAAQ,OAEpDH,EAAUE,EAAuBC,EAAQ,OAE7C,SAASD,EAAuBE,GAAO,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CAAE,QAAWA,EAAO,CAEjFH,EAA4B,O","sources":["Components/miscellaneous/GroupChatModal.js","Components/miscellaneous/Notification.js","Components/ChatStack.js","Components/MyChats.js","../node_modules/react-notification-badge/lib/index.js"],"sourcesContent":["import {\n  Box,\n  Button,\n  FormControl,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\nimport UserListItem from \"../UserAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const toast = useToast();\n\n  const { user, chats, setChats, selectedChat } = ChatState();\n\n  // to add selected users in group\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 1000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  // for search user\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      // console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  // for create a chat\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 2000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 1000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 1000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user1={u}\n                  admin={user}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 3)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import {\r\n  Box,\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  Text,\r\n  Tooltip,\r\n  MenuList,\r\n  Avatar,\r\n  MenuItem,\r\n  MenuDivider,\r\n  Drawer,\r\n  useDisclosure,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerBody,\r\n  Input,\r\n  useToast,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport axios from \"axios\";\r\nimport UserListItem from \"../UserAvatar/UserListItem\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport NotificationBadge from \"react-notification-badge/lib/components/NotificationBadge\";\r\n\r\nconst Notification = () => {\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n  return (\r\n    <div>\r\n      <Menu>\r\n        <MenuButton p=\"1\">\r\n          <NotificationBadge\r\n            count={notification?.length}\r\n            effect={Effect.SCALE}\r\n          />\r\n          <BellIcon fontSize=\"2xl\" m=\"1\" />\r\n        </MenuButton>\r\n        {/* if notification lengh is 0 then display no new notification */}\r\n        <MenuList pl={10}>\r\n          {/* {!notification.length && \"No new Messages\"} */}\r\n\r\n          {!notification?.length && \"No New Messages\"}\r\n          {notification?.map((notif) => (\r\n            <MenuItem\r\n              key={notif._id}\r\n              onClick={() => {\r\n                setSelectedChat(notif.chat);\r\n                setNotification(notification.filter((n) => n !== notif));\r\n              }}\r\n            >\r\n              {notif.chat.isGroupChat\r\n                ? `New Message in ${notif.chat.chatName}`\r\n                : `New Message from ${getSender(user, notif.chat.users)}`}\r\n            </MenuItem>\r\n          ))}\r\n        </MenuList>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;","import { Box, Stack, Text, useToast } from \"@chakra-ui/react\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport axios from \"axios\";\r\n\r\nconst ChatStack = ({ fetchAgain }) => {\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n  const [loggedUser, setLoggedUser] = useState();\r\n  const toast = useToast();\r\n  const refs = useRef([]);\r\n\r\n  const decryptMsg = (key, message) => {\r\n    return (message = CryptoJS.AES.decrypt(message, key).toString(\r\n      CryptoJS.enc.Utf8\r\n    ));\r\n  };\r\n\r\n  const fetchChats = async () => {\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      // give list of chats\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 2000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const isChatSelected = (chat) => {\r\n    return selectedChat && selectedChat._id === chat._id;\r\n  };\r\n\r\n  const hasUnreadMessages = (chat) => {\r\n    return chat.latestMessage?.sender?.id !== user._id;\r\n  };\r\n\r\n  const getChatBgColor = (chat) => {\r\n    if (isChatSelected(chat)) {\r\n      return hasUnreadMessages(chat) ? \"#4c6ed5\" : \"#E8E8E8\";\r\n    } else {\r\n      return \"#E8E8E8\";\r\n    }\r\n  };\r\n\r\n  const getChatTextColor = (chat) => {\r\n    return isChatSelected(chat) ? \"white\" : \"black\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  }, [fetchAgain]);\r\n  const readMessageOnClick = (index) => {\r\n    var arr = refs.current[index].querySelectorAll(\"p\");\r\n    arr[2].style.fontWeight = \"normal\";\r\n    arr[3].style.fontWeight = \"normal\";\r\n  };\r\n  return (\r\n    <Stack overflowY=\"scroll\">\r\n      {chats.map((chat, index) => {\r\n        var lastSeen = \"\";\r\n        chat?.lastSeen.forEach((element) => {\r\n          if (element.participant === String(user._id)) {\r\n            lastSeen = element.lastTime;\r\n          }\r\n        });\r\n        return (\r\n          <Box\r\n            ref={(el) => (refs.current[index] = el)}\r\n            onClick={() => {\r\n              setSelectedChat(chat);\r\n              readMessageOnClick(index);\r\n            }}\r\n            cursor=\"pointer\"\r\n            // bg={selectedChat === chat ? \"#4c6ed5\" : \"#E8E8E8\"}\r\n            // color={selectedChat === chat ? \"white\" : \"black\"}\r\n            bg={getChatBgColor(chat)}\r\n            color={getChatTextColor(chat)}\r\n            px={3}\r\n            py={2}\r\n            borderRadius=\"lg\"\r\n            key={chat._id}\r\n          >\r\n            <Text>\r\n              {!chat.isGroupChat\r\n                ? getSender(loggedUser, chat.users)\r\n                : chat.chatName}\r\n            </Text>\r\n            {chat.latestMessage && (\r\n              <Text fontSize=\"xs\">\r\n                <Text\r\n                  fontWeight={\r\n                    lastSeen < chat?.latestMessage?.time ? \"bold\" : \"normal\"\r\n                  }\r\n                  display={\"inline\"}\r\n                >\r\n                  {chat?.latestMessage?.sender?.name} :{\" \"}\r\n                </Text>\r\n                <Text\r\n                  fontWeight={\r\n                    lastSeen < chat?.latestMessage?.time ? \"bold\" : \"normal\"\r\n                  }\r\n                  display={\"inline\"}\r\n                >\r\n                  {chat.latestMessage.content.length > 50\r\n                    ? decryptMsg(\r\n                        chat._id,\r\n                        chat.latestMessage.content\r\n                      ).substring(0, 51) + \"...\"\r\n                    : decryptMsg(chat._id, chat.latestMessage.content)}\r\n                </Text>\r\n              </Text>\r\n            )}\r\n          </Box>\r\n        );\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatStack;","import React from \"react\";\nimport { AddIcon } from \"@chakra-ui/icons\";\nimport { Box } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button, IconButton, Tooltip } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport Notification from \"./miscellaneous/Notification\"\n\n// import CryptoJS from \"crypto-js\";\nimport ChatStack from \"./ChatStack\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const { selectedChat, setSelectedChat, user, chats, setChats, newMsg } =\n    ChatState();\n  const [loggedUser, setLoggedUser] = useState();\n  // const chatSelect = selectedChat;\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // setSelectedChat(chatSelect);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      // give list of chats\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  // console.log(\"chats : \", selectedChat);\n  useEffect(() => {\n    fetchChats();\n    // setSelectedChat(chatSelect);\n  }, [newMsg]);\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      mr={1}\n      borderWidth=\"1px\"\n      height={\"100%\"}\n    >\n      <Box display=\"flex\" justifyContent={\"space-evenly\"}>\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        marginRight={16}\n      >\n        My Chats\n        </Box>\n        <Box display=\"flex\" marginLeft={9}>\n<GroupChatModal>\n\n<Tooltip label=\"New Group Chat\" hasArrow placement=\"bottom-end\">\n  <IconButton\n  display=\"flex\"\n  fontSize={{ base: \"10px\", md: \"10px\", lg: \"17px\" }}\n  icon={<AddIcon />}\n  >\n\n  </IconButton>\n          \n</Tooltip>\n</GroupChatModal>        \n<Notification/>\n\n      </Box>\n      </Box>\n      \n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {/* if there is chat then display chats other show chatloading */}\n\n        {chats ? <ChatStack fetchAgain={fetchAgain} /> : <ChatLoading />}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"Effect\", {\n  enumerable: true,\n  get: function get() {\n    return _Effect[\"default\"];\n  }\n});\nexports[\"default\"] = void 0;\n\nvar _NotificationBadge = _interopRequireDefault(require(\"./components/NotificationBadge\"));\n\nvar _Effect = _interopRequireDefault(require(\"./components/Effect\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _default = _NotificationBadge[\"default\"];\nexports[\"default\"] = _default;"],"names":["children","useDisclosure","isOpen","onOpen","onClose","useState","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","loading","setLoading","toast","useToast","ChatState","user","chats","setChats","handleSearch","selectedChat","query","config","headers","Authorization","token","axios","data","title","description","status","duration","isClosable","position","handleSubmit","name","users","JSON","stringify","map","u","_id","response","onClick","isCentered","fontSize","fontFamily","display","justifyContent","flexDir","alignItems","I","placeholder","mb","onChange","e","target","value","w","flexWrap","UserBadgeItem","user1","admin","handleFunction","delUser","filter","sel","slice","UserListItem","userToAdd","includes","colorScheme","setSelectedChat","notification","setNotification","p","NotificationBadge","count","length","effect","Effect","m","pl","notif","chat","n","isGroupChat","chatName","getSender","fetchAgain","loggedUser","setLoggedUser","refs","useRef","decryptMsg","key","message","CryptoJS","toString","fetchChats","isChatSelected","getChatBgColor","latestMessage","sender","id","hasUnreadMessages","getChatTextColor","useEffect","parse","localStorage","getItem","overflowY","index","lastSeen","forEach","element","participant","String","lastTime","ref","el","current","arr","querySelectorAll","style","fontWeight","readMessageOnClick","cursor","bg","color","px","py","borderRadius","time","content","substring","newMsg","base","md","mr","borderWidth","height","pb","marginRight","marginLeft","label","hasArrow","placement","lg","icon","h","ChatLoading","Object","defineProperty","exports","enumerable","get","_Effect","_NotificationBadge","_interopRequireDefault","require","obj","__esModule"],"sourceRoot":""}