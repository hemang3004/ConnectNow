{"version":3,"file":"static/js/137.fc9f91e9.chunk.js","mappings":"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","sources":["Components/Authentication/Signup.js"],"sourcesContent":["import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nconst Signup = () => {\n  const toast = useToast();\n  const history = useHistory();\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [pic, setPic] = useState();\n  const [show, setShow] = useState(false);\n  const [picLoading, setPicLoading] = useState(false);\n  let x;\n  let re='0';\n  const {setVerifiedEmail}=ChatState();\n\n  const handleClick = () => setShow(!show);\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    // FormData object is a common way to create a bundle of data to send to the server using XMLHttpRequest or fetch\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"hemang3004\");\n      fetch(\"https://api.cloudinary.com/v1_1/dm37epkmg/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\nconst submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n          re \n        },\n        config\n      );\n      console.log(data);\n      // toast({\n      //   title: \"Registration Successful\",\n      //   status: \"success\",\n      //   duration: 5000,\n      //   isClosable: true,\n      //   position: \"bottom\",\n      // });\n      // localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      setVerifiedEmail(email);\n      history.push(\"/verify\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const validateEmail = () => {\n    var regxEmail =\n      /^([a-zA-Z0-9\\.-]+)@([a-zA-Z0-9]+)\\.([a-z]{2,5})(.[a-z]{2,5})?$/;\n    if (!regxEmail.test(email)) {\n      x = 0;\n      document.getElementById(\"invemail\").innerHTML =\n        \"Please enter email in proper format!!\";\n      return false;\n    } else {\n      x = 1;\n      document.getElementById(\"invemail\").innerHTML = \"\";\n      return true;\n    }\n  };\n\n  const validatePassword = () => {\n    var regexPass =\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n    if (!regexPass.test(password)) {\n      x = 0;\n      document.getElementById(\"invpass\").innerHTML =\n        \"Password must be atleast 8 characters, including uppercase letter,lowercase letter,number,special character!!\";\n      return false;\n    } else {\n      x = 1;\n      document.getElementById(\"invpass\").innerHTML = \"\";\n      return true;\n    }\n  };\n\n  const validate = () => {\n    if (x == 0) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const validateCnfPassword = () => {\n    if (password !== confirmpassword) {\n      x = 0;\n      document.getElementById(\"invconfpass\").innerHTML = \"Passwords not match!\";\n      return false;\n    } else {\n      x = 1;\n      document.getElementById(\"invconfpass\").innerHTML = \"\";\n      return true;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <form style={{ width: \"100%\" }} onSubmit={validate()}>\n        <FormControl id=\"first-name\" isRequired>\n          <FormLabel>Name</FormLabel>\n          <Input\n            placeholder=\"Enter Your Name\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n          ></Input>\n        </FormControl>\n\n        <FormControl id=\"email\" isRequired>\n          <FormLabel>Email</FormLabel>\n          <Input\n            placeholder=\"Enter Your Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n            onKeyUp={validateEmail}\n          />\n          <span id=\"invemail\" style={{ color: \"red\", fontSize: \"12px\" }}></span>\n        </FormControl>\n\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Password</FormLabel>\n          <InputGroup>\n            <Input\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter Your Password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n              }}\n              onKeyUp={validatePassword}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? \"Hide\" : \"Show\"}\n              </button>\n            </InputRightElement>\n          </InputGroup>\n          <span id=\"invpass\" style={{ color: \"red\", fontSize: \"12px\" }}></span>\n        </FormControl>\n\n        <FormControl id=\"password\" isRequired>\n          <FormLabel>Confirm Password</FormLabel>\n          <InputGroup>\n            <Input\n              type={show ? \"text\" : \"password\"}\n              placeholder=\"Enter Your Password Again\"\n              onChange={(e) => {\n                setConfirmpassword(e.target.value);\n              }}\n              onKeyUp={validateCnfPassword}\n            />\n            <InputRightElement width=\"4.5rem\">\n              <button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n                {show ? \"Hide\" : \"Show\"}\n              </button>\n            </InputRightElement>\n          </InputGroup>\n          <span\n            id=\"invconfpass\"\n            style={{ color: \"red\", fontSize: \"12px\" }}\n          ></span>\n        </FormControl>\n\n        <FormControl id=\"pic\">\n          <FormLabel>Upload Your Picture</FormLabel>\n          <Input\n            type=\"file\"\n            p={1.5}\n            accept=\"image/*\"\n            onChange={(e) => {\n              postDetails(e.target.files[0]);\n            }}\n          />\n        </FormControl>\n\n        <Button\n          colorScheme=\"blue\"\n          width=\"100%\"\n          style={{ marginTop: 15 }}\n          onClick={submitHandler}\n          isLoading={picLoading}\n        >\n          Sign Up\n        </Button>\n      </form>\n    </VStack>\n  );\n};\n\nexport default Signup;\n"],"names":["x","toast","useToast","history","useHistory","useState","name","setName","email","setEmail","password","setPassword","confirmpassword","setConfirmpassword","pic","setPic","show","setShow","picLoading","setPicLoading","setVerifiedEmail","ChatState","handleClick","submitHandler","title","status","duration","isClosable","position","config","headers","axios","re","data","console","log","push","description","response","message","spacing","style","width","onSubmit","id","isRequired","I","placeholder","onChange","e","target","value","onKeyUp","test","document","getElementById","innerHTML","color","fontSize","type","h","size","onClick","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","colorScheme","marginTop","isLoading"],"sourceRoot":""}