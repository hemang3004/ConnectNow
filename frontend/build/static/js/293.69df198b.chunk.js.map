{"version":3,"file":"static/js/293.69df198b.chunk.js","mappings":"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","sources":["Components/UserAvatar/UserBadgeItem.js","Components/UserAvatar/UserListItem.js","Components/miscellaneous/ProfileModal.js","Components/SingleChat.js","Components/ScrollableChat.js","Components/miscellaneous/UpdateGroupChatModal.js","Components/ChatBox.js","Pages/ChatPages.js","config/ChatLogics.js"],"sourcesContent":["import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nvar x;\nconst UserBadgeItem = ({ user1, handleFunction, admin }) => {\n  const { user } = ChatState();\n  const fn = () => {\n    return user._id === admin._id;\n  };\n  x = fn();\n  return (\n    <div>\n      {x ? (\n        <Badge\n          px={2}\n          py={1}\n          borderRadius=\"lg\"\n          m={1}\n          mb={2}\n          variant=\"solid\"\n          fontSize={12}\n          colorScheme=\"purple\"\n          cursor=\"pointer\"\n          onClick={handleFunction}\n        >\n          {user1.name}\n          {admin._id === user1._id && <span> (Admin)</span>}\n          {admin._id === user._id && <CloseIcon pl={1} />}\n        </Badge>\n      ) : (\n        <Badge\n          px={2}\n          py={1}\n          borderRadius=\"lg\"\n          m={1}\n          mb={2}\n          variant=\"solid\"\n          fontSize={12}\n          colorScheme=\"purple\"\n          cursor=\"pointer\"\n          // onClick={handleFunction}\n        >\n          {user1.name}\n          {admin._id === user1._id && <span> (Admin)</span>}\n          {admin._id === user._id && <CloseIcon pl={1} />}\n        </Badge>\n      )}\n    </div>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n// import { ChatState } from \"../../Context/ChatProvider\";\nimport React from \"react\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  // const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#2b6cb0\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon,InfoIcon } from \"@chakra-ui/icons\";\nimport {\n  Avatar,\n  Button,\n  IconButton,\n  Image,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport React, { children } from \"react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          display={{ base: \"flex\" }}\n          icon={<InfoIcon />}\n          onClick={onOpen}\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            display=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            {/* <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={\n                user.pic\n                  ? user.pic\n                  : \"https://icon-library.com/images/anonymous-avatar-icon/anonymous-avatar-icon-25.jpg\"\n              }\n              alt={user.name}\n            /> */}\n            {user.pic ? (\n              <Image\n                borderRadius=\"full\"\n                boxSize=\"150px\"\n                src={user.pic}\n                alt={user.name}\n              />\n            ) : (\n              <Avatar\n                size=\"2xl\"\n                cursor=\"pointer\"\n                name={user.name}\n                // src={user.pic}\n              />\n            )}\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { ArrowBackIcon, Icon, InfoIcon } from \"@chakra-ui/icons\";\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text, Stack, HStack } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Button,\n  IconButton,\n  position,\n  Spinner,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport CryptoJS from \"crypto-js\";\nimport Picker from \"emoji-picker-react\";\nimport moment from \"moment-timezone\";\n\nimport { BsEmojiSmileFill } from \"react-icons/bs\";\n\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport {\n  MdCall,\n  MdOutlineMic,\n  MdAttachFile,\n  MdDelete,\n  MdAlbum,\n} from \"react-icons/md\";\nimport { useHistory } from \"react-router-dom\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n\nvar selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const inputRef = useRef();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [videoCallOn, setVideoCallOn] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [status, setStatus] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [file, setFile] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [activeUser, setActiveUser] = useState({});\n  const fileInputRef = useRef();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    newMsg,\n    setNewMsg,\n    activeUsers,\n    socket,\n    socketConnected,\n  } = ChatState();\n\n  const { transcript, resetTranscript, listening } = useSpeechRecognition();\n\n  const toast = useToast();\n  const history = useHistory();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  useEffect(() => {\n    if (transcript) {\n      inputRef.current.value = transcript;\n      setNewMessage(transcript);\n    }\n  }, [transcript]);\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      // console.log(\"decrypt data \", data);\n\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    // if enter key is pressed and newMessage is typed\n    // if (transcript) {\n    //   setNewMessage(transcript);\n    //   // resetTranscript;\n    // }\n    if (event.key === \"Enter\" && newMessage && !file) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        setNewMessage(\"\");\n        const cipherText = CryptoJS.AES.encrypt(\n          newMessage,\n          String(selectedChat._id)\n        ).toString();\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: cipherText,\n            chatId: selectedChat,\n            type: \"text\",\n            url: \"\",\n          },\n          config\n        );\n\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n        setNewMsg([...newMsg, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    } else if (event.key === \"Enter\" && newMessage && file) {\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        setNewMessage(\"\");\n        // setFile(\"\");\n        setUrl(\"\");\n        const cipherText = CryptoJS.AES.encrypt(\n          newMessage,\n          String(selectedChat._id)\n        ).toString();\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: cipherText,\n            chatId: selectedChat,\n            type: \"file\",\n            url: String(url),\n          },\n          config\n        );\n\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n        setNewMsg([...newMsg, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  const handleButtonClick = (e) => {\n    e.preventDefault();\n    if (SpeechRecognition.browserSupportsSpeechRecognition()) {\n      if (listening) {\n        SpeechRecognition.stopListening();\n      } else {\n        SpeechRecognition.startListening({ continuous: true });\n      }\n    }\n  };\n\n  const handleInputClick = () => {\n    resetTranscript();\n    // setNewMessage(\"\");\n  };\n\n  useEffect(() => {\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n    socket.on(\"show calling\", () => {\n      setVideoCallOn(true);\n    });\n    // socket.on(\"show members of video\",(nums)=>{console.log(nums);})\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      // if we are in karan chat and sejal sent msg to hemang then that msg will not render in karan's chat but that will be displayed in notification\n      // setNewMsg(true);\n      if (\n        // if chat is not selected or selected chat's id not eq to newmsg.chat's id then give it to notification\n\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setNewMsg([...messages, newMessageRecieved]);\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const deleteHandler = async () => {\n    console.log(user.token);\n    try {\n      // setLoading(true)\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const data = await axios.put(\n        `/api/chat/deletechat`,\n        {\n          chatId: selectedChat._id,\n          userId: user._id,\n        },\n        config\n      );\n\n      window.location.reload();\n      //  setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // typing functionality\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n    // typing indicator logic\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      // &&typing is not needed i guess\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const uploadFile = async (data) => {\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"FormData\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      console.log(\"Files here\", data);\n      const response = await axios.post(\n        `api/message/uploadFile/${selectedChat._id}`,\n        data,\n        config\n      );\n      return response.data;\n    } catch (error) {\n      console.log(\"Error while calling the API \", error.message);\n    }\n  };\n  useEffect(() => {\n    const getImage = async () => {\n      if (file) {\n        const data = new FormData();\n        data.append(\"name\", file.name);\n        data.append(\"file\", file);\n        const response = await uploadFile(data);\n        setUrl(response);\n      }\n    };\n    getImage();\n    console.log();\n  }, [file]);\n\n  const handleEmojiPickerHideShow = () => {\n    setShowEmojiPicker(!showEmojiPicker);\n  };\n\n  const handleEmojiClick = (emoji) => {\n    // console.log(\"emoji\", typeof emoji.emoji);\n    let messg = newMessage;\n    messg += emoji.emoji;\n    setNewMessage(messg);\n  };\n  useEffect(() => {}, [inputRef]);\n  const sendStatus = () => {\n    const y = getSenderFull(user, selectedChat.users)._id;\n    const x = activeUsers?.filter((u) => u._id === y)[0];\n    return x?.online;\n  };\n  const getLastSeen = () => {\n    const y = getSenderFull(user, selectedChat.users)._id;\n    const x = activeUsers?.filter((u) => u._id === y)[0];\n    return x?.lasttime;\n  };\n  const actualDate = (Datetime) => {\n    if (!Datetime) return \"\";\n    let date_ob = new Date(Datetime);\n    const date = new Date();\n    const offset = -moment.tz(date, user.timeZone).utcOffset();\n\n    // const options = { timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone };\n    date_ob.setMinutes(date_ob.getMinutes() - offset);\n\n    let day = (\"0\" + date_ob.getDate()).slice(-2);\n\n    // // current month\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n\n    // // current year\n    let year = date_ob.getFullYear();\n\n    // // current hours\n    let hours = (\"0\" + date_ob.getHours()).slice(-2);\n\n    // // current minutes\n    let minutes = (\"0\" + date_ob.getMinutes()).slice(-2);\n\n    // // current seconds\n\n    // DD/MM/YYYY HH:MM\n    let curr = day + \"/\" + month + \"/\" + year + \" \" + hours + \":\" + minutes;\n    // console.log(date_ob)\n    return \"Last Seen At : \" + curr;\n  };\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            {/* arrow back icon if screen is small */}\n            <HStack>\n              <IconButton\n                display={{ base: \"flex\", md: \"none\" }}\n                icon={<ArrowBackIcon />}\n                onClick={() => setSelectedChat(\"\")}\n              />\n              <IconButton\n                display={{ base: \"flex\" }}\n                icon={<MdDelete />}\n                // fontSize=\"25px\"\n                onClick={onOpen}\n                ml={{ md: \"0px!important\" }}\n              />\n              <AlertDialog isOpen={isOpen} onClose={onClose} isCentered>\n                <AlertDialogOverlay>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>Delete Chat</AlertDialogHeader>\n                    <AlertDialogBody>\n                      {\"Are you sure want to delete chat?\"}\n                    </AlertDialogBody>\n                    <AlertDialogFooter>\n                      <Button onClick={onClose} ml={3}>\n                        NO\n                      </Button>\n                      <Button onClick={deleteHandler} colorScheme=\"red\" ml={3}>\n                        YES\n                      </Button>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialogOverlay>\n              </AlertDialog>\n            </HStack>\n\n            {/* if group chat selected show group chat ui and if not group chat then show  user name and profile*/}\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {/* oppo. user name and icon */}\n                  {/* {getSender(user, selectedChat.users)} */}\n                  {/* {(activeUser && !selectedChat.isGroupChat)&&(<IconButton\n                icon={<MdAlbum />}\n                fontSize=\"20px\"\n                size={\"m\"}\n               \n                variant={\"ghost\"}\n                colorScheme={activeUser && !selectedChat.isGroupChat ?\"whatsapp\":\"red\"}\n                ml={{ md: \"0px!important\" }}\n              />)} */}\n                  <Stack>\n                    {/* oppo. user name and icon */}\n                    <Box fontSize={\"25px !important\"}>\n                      {getSender(user, selectedChat.users)}\n                    </Box>\n                    <Box\n                      display={\"flex\"}\n                      justifyContent={\"center\"}\n                      fontSize={\"12px !important\"}\n                      mt={\"0px !important\"}\n                    >\n                      {sendStatus()\n                        ? \"Online\"\n                        : `Offline ${actualDate(getLastSeen())}`}\n                    </Box>\n                  </Stack>\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {/* group name */}\n                  {selectedChat.chatName.toUpperCase()}\n\n                  <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                    <UpdateGroupChatModal\n                      fetchMessages={fetchMessages}\n                      fetchAgain={fetchAgain}\n                      setFetchAgain={setFetchAgain}\n                    />\n                  </div>\n                </>\n              ))}\n          </Text>\n\n          {/* for displaying text msg */}\n          <Box\n            display=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {/* Messages ui */}\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              // {/* messages */}\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    height={25}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <HStack>\n                <div className=\"wrapper\">\n                  <IconButton\n                    className=\"emoji\"\n                    icon={<BsEmojiSmileFill />}\n                    size={\"md\"}\n                    backgroundColor=\"#e8e8e8\"\n                    variant=\"solid\"\n                    color={\"#3182ce\"}\n                    onClick={handleEmojiPickerHideShow}\n                  ></IconButton>\n                  {showEmojiPicker && (\n                    <div className=\"picker-wrapper\">\n                      <Picker onEmojiClick={handleEmojiClick} />\n                    </div>\n                  )}\n                </div>\n\n                <Input\n                  ref={inputRef}\n                  variant=\"filled\"\n                  bg=\"#E0E0E0\"\n                  placeholder=\"Enter a message...\"\n                  onClick={handleInputClick}\n                  onChange={typingHandler}\n                  value={newMessage || transcript}\n                />\n\n                <IconButton\n                  icon={<MdOutlineMic />}\n                  colorScheme=\"blue\"\n                  variant=\"solid\"\n                  // onClick={speechToText}\n                  onClick={handleButtonClick}\n                ></IconButton>\n\n                <IconButton\n                  icon={<MdAttachFile />}\n                  colorScheme=\"blue\"\n                  onClick={() => fileInputRef.current.click()}\n                  variant=\"solid\"\n                ></IconButton>\n                <input\n                  type=\"file\"\n                  ref={fileInputRef}\n                  style={{ display: \"none\" }}\n                  onChange={(e) => {\n                    console.log(e.target.files[0]);\n                    setFile(e.target.files[0]);\n                    setNewMessage(e.target.files[0]?.name);\n                  }}\n                />\n              </HStack>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        // if chat not seleced\n\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport { useEffect, useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport {\n  isLastMessage,\n  isNextOppoSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport axios from \"axios\";\nimport {\n  useToast,\n  Text,\n  Divider\n} from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport moment from \"moment-timezone\";\n\nconst icons={\"pdf\": 'https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/27_Pdf_File_Type_Adobe_logo_logos-512.png',\n \"png\":\"http://res.cloudinary.com/dm37epkmg/image/upload/v1682328226/fbrtebnvqsbdiwlkdccj.png\"\n }\n const getUTCTime=()=>{\n  const now = new Date();\nconst utcDate = now.getUTCFullYear() + '-' + (now.getUTCMonth() + 1) + '-' + now.getUTCDate();\nconst utcTime = now.getUTCHours() + ':' + now.getUTCMinutes() + ':' + now.getUTCSeconds();\nconst utcDateTime = utcDate + ' ' + utcTime;\nreturn utcDateTime;\n}\n const ScrollableChat = ({ messages }) => {\n  const { user,selectedChat } = ChatState();\n  const getMsgDate=(Datetime)=>{\n    if(Datetime===null){\n    const date_ob = new Date(getUTCTime());\n    let curr=\"\";\n    const offset = -moment.tz(date_ob, user.timeZone).utcOffset();\n     // const options = { timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone };\n     date_ob.setMinutes(date_ob.getMinutes()-offset)\n     let day = (\"0\" + date_ob.getDate()).slice(-2);\n     // // current month\n     let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n     // // current year\n     let year = date_ob.getFullYear();\n    curr = day+'/'+month+'/'+year;\n    console.log(curr)\n     return curr;}\n     else{\n      let date_ob = new Date(Datetime);\n    const date = new Date();\n   const offset = -moment.tz(date, user.timeZone).utcOffset();\n    // const options = { timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone };\n    date_ob.setMinutes(date_ob.getMinutes()-offset)\n    let day = (\"0\" + date_ob.getDate()).slice(-2);\n    // // current month\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n    // // current year\n    let year = date_ob.getFullYear();\n    // DD/MM/YYYY \n    let curr = day+'/'+month+'/'+year\n    // console.log(date_ob)\n    return curr;\n     }\n  }\nlet chatDate=messages.length!==0?getMsgDate(messages[0]?.time):getMsgDate(null)\n  const toast=useToast()\n  const actualDate=(Datetime)=>{\n    let date_ob = new Date(Datetime);\n    const date = new Date();\n   const offset = -moment.tz(date, user.timeZone).utcOffset();\n\n    // const options = { timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone };\n    date_ob.setMinutes(date_ob.getMinutes()-offset)\n\n    let day = (\"0\" + date_ob.getDate()).slice(-2);\n  \n    // // current month\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n  \n    // // current year\n    let year = date_ob.getFullYear();\n  \n    // // current hours\n    let hours = (\"0\" + date_ob.getHours()).slice(-2);\n  \n    // // current minutes\n    let minutes = (\"0\" + date_ob.getMinutes()).slice(-2);\n  \n    // // current seconds\n    \n  \n    // DD/MM/YYYY HH:MM\n    let curr = day+'/'+month+'/'+year+' '+hours+':'+minutes;\n    // console.log(date_ob)\n    return curr;\n  };\n  const decryptMsg = (message) => {\n    const key = String(selectedChat._id);\n    let decryptedMessage;\n    try {\n      decryptedMessage = CryptoJS.AES.decrypt(message, key).toString(\n        CryptoJS.enc.Utf8\n      );\n      return decryptedMessage;\n    } catch (error) {\n      console.log(\"Error: \", error);\n    }\n    return decryptedMessage;\n  };\n  const downloadMedia = async (e, originalImage) => {\n   \n    e.preventDefault();\n    try {\n      console.log(originalImage)\n      const response = await axios.get(originalImage, { responseType: 'blob' ,headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`,\n      }});\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      const nameSplit = originalImage.split(\"/\");\n      const duplicateName = nameSplit.pop();\n      a.download = \"\" + duplicateName + \"\";\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.log('Error while downloading the image ', error);\n    }\n  }\n  const changeDate=(date)=>{\n    chatDate=date;\n    return true;\n  }\n  return (\n    <ScrollableFeed>\n      <Text fontWeight={\"hairline\"} display=\"flex\" justifyContent=\"center\">\n      <Divider />\n        {chatDate}\n        <Divider/>\n        </Text>\n      {messages &&\n        messages.map((m, i) => (\n          <div key={m._id}>\n          <Text fontWeight={\"hairline\"} display={chatDate!=getMsgDate(m?.time)&&changeDate(getMsgDate(m?.time))?\"flex\":\"none\" } justifyContent=\"center\">{chatDate}</Text>\n          <div style={{ display: \"flex\" }} >\n            {(isNextOppoSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"15px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n           \n            {/* setting diff color for sender and receiver's chat */}\n            {m.type==\"text\"?(\n              <span\n              style={{\n                backgroundColor: `${             \n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"13px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n                height:\"60px\"\n              }}\n            ><span style={{fontSize:\"10px\"}} >{actualDate(m?.time)}</span><br/>\n              {decryptMsg(m?.content)}\n            </span>\n            ):(<div\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"10px\",\n                padding: \"1px 10px\",\n                width:\"270px\",\n                height:\"auto\",\n                maxWidth: \"75%\",\n               display:\"flex\",\n                flexDirection:\"column\"\n              }}\n              onClick={(e)=>downloadMedia(e,m?.url)}\n            ><span display={\"block\"} style={{fontSize:\"10px\",paddingBottom:\"7px\",paddingTop:\"5px\",paddingLeft:\"5px\" }} >{actualDate(m?.time)}</span>\n              <div  style={{display:\"flex\",justifyContent:\"space-between\"}}>\n              <img src={icons[m.url.split(\".\").pop()]} style={{ height:50, width: 50,marginLeft:\"0\",display:\"block\", objectFit:\"cover\"}}  />\n            <span\n              style={{ display:\"block\",fontSize: 15 , margin:\"auto\"}}\n            >\n              {decryptMsg(m?.content)}\n            </span>\n              </div>\n               \n            </div>\n           )}\n            \n          </div>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { ViewIcon,InfoIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  IconButton,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Spinner,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\nimport UserListItem from \"../UserAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  // for seperate groupchat rename use seperate loading\n  const [renameloading, setRenameLoading] = useState(false);\n\n  const toast = useToast();\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  // remove user fun\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admin can remove a user!\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      // if logged in user is admin and remove him self then we don't want that a user see a group as he left group\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  // search users for add a user to group fun\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  // rename group chat fun\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      //   console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  // func to add user in grp\n  const handleAddUser = async (user1) => {\n    //   check whether user already exist or not\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    // check whether user is admin or not\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admin can add a user!\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton\n        display={{ base: \"flex\" }}\n        icon={<InfoIcon />}\n        onClick={onOpen}\n      />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user1={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl display=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"blue\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult\n                ?.slice(0, 2)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleAddUser(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import React from \"react\";\nimport { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ChatBox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"71.7%\" }}\n      // borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default ChatBox;","import { Box } from \"@chakra-ui/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport ChatBox from \"../Components/ChatBox\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst MyChats = React.lazy(() => import(\"../Components/MyChats\"));\r\nconst ChatPages = () => {\r\n  // taking user state from context api\r\n\r\n  const history = useHistory();\r\n  const {\r\n    user,\r\n    setUser,\r\n    activeUsers,\r\n    setActiveUsers,\r\n    socket,\r\n    setNotification,\r\n  } = ChatState();\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  useEffect(() => {\r\n    //   fetching userinfo from local storage that is logged in or signed up\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setNotification(userInfo.notification);\r\n    console.log(userInfo.notification);\r\n    userInfo.notification = [];\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(userInfo));\r\n    setUser(userInfo);\r\n    socket.emit(\"addUsers\", userInfo);\r\n\r\n    //   if user not logged in then redirect to homepage\r\n    if (!userInfo) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [history]);\r\n\r\n  window.addEventListener(\"beforeunload\", () => {\r\n    // Emit a \"disconnect\" event to the server\r\n    socket.emit(\"disconnect\");\r\n  });\r\n\r\n  useEffect(() => {\r\n    socket.on(\"getUsers\", (users) => {\r\n      setActiveUsers(users);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        w=\"100%\"\r\n        h=\"100vh\"\r\n        pl=\"3px\"\r\n      >\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <ChatBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPages;","// for one one chat there is 2 users so if user[0] id = logged user then return second user else return first user\n// as in one one chat name to be displayed is opponent's user name\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1]?.name : users[0]?.name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n\n//messages: all messages, m: current message, i:index of all message,loggedin users id\nexport const isNextOppoSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\n// for isSameSender : if current msg index is less than messages len -1 && (sender's id of next messagse is not eq. to sender id of current msg || sender's id of next messagse is not eq. to undefined) && sender's id of current msg is not eql to logged in user id\n"],"names":["x","user1","handleFunction","admin","user","ChatState","_id","px","py","borderRadius","m","mb","variant","fontSize","colorScheme","cursor","onClick","name","pl","bg","_hover","background","color","w","d","alignItems","mr","size","src","pic","email","children","useDisclosure","isOpen","onOpen","onClose","display","base","icon","isCentered","h","fontFamily","justifyContent","flexDir","boxSize","alt","md","selectedChatCompare","icons","messages","selectedChat","getMsgDate","Datetime","curr","date_ob","Date","now","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCTime","offset","moment","timeZone","utcOffset","setMinutes","getMinutes","getDate","slice","getMonth","getFullYear","console","log","date","chatDate","length","time","actualDate","useToast","getHours","decryptMsg","message","decryptedMessage","key","String","CryptoJS","toString","error","downloadMedia","e","originalImage","preventDefault","axios","responseType","headers","Authorization","token","response","url","window","URL","createObjectURL","Blob","data","a","document","createElement","style","href","nameSplit","split","duplicateName","pop","download","body","appendChild","click","revokeObjectURL","fontWeight","map","i","isNextOppoSender","isLastMessage","label","sender","placement","hasArrow","mt","type","backgroundColor","marginLeft","isSameSenderMargin","marginTop","isSameUser","padding","maxWidth","height","content","width","flexDirection","paddingBottom","paddingTop","paddingLeft","objectFit","margin","fetchMessages","fetchAgain","setFetchAgain","useState","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","setLoading","renameloading","setRenameLoading","toast","setSelectedChat","handleRemove","groupAdmin","title","status","duration","isClosable","position","config","chatId","userId","description","handleSearch","query","handleRename","chatName","handleAddUser","users","find","u","flexWrap","pb","UserBadgeItem","I","placeholder","value","onChange","target","ml","isLoading","UserListItem","inputRef","useRef","setMessages","setVideoCallOn","newMessage","setNewMessage","typing","setTyping","istyping","setIsTyping","showEmojiPicker","setShowEmojiPicker","file","setFile","setUrl","fileInputRef","notification","setNotification","newMsg","setNewMsg","activeUsers","socket","socketConnected","useSpeechRecognition","transcript","resetTranscript","listening","defaultOptions","useHistory","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","useEffect","current","emit","sendMessage","event","cipherText","on","newMessageRecieved","chat","includes","deleteHandler","location","reload","uploadFile","getImage","FormData","append","isGroupChat","toUpperCase","getSender","y","getSenderFull","filter","online","sendStatus","lasttime","getLastSeen","ProfileModal","p","overflowY","alignSelf","className","onKeyDown","id","isRequired","options","marginBottom","onEmojiClick","emoji","messg","ref","lastTypingTime","getTime","setTimeout","SpeechRecognition","continuous","files","borderWidth","MyChats","React","history","setUser","setActiveUsers","userInfo","JSON","parse","localStorage","getItem","setItem","stringify","push","addEventListener","loggedUser","undefined"],"sourceRoot":""}