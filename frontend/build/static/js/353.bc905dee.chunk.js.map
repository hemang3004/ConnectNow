{"version":3,"file":"static/js/353.bc905dee.chunk.js","mappings":"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","sources":["Components/UserAvatar/UserBadgeItem.js","Components/UserAvatar/UserListItem.js","Components/ChannelStack.js","Components/miscellaneous/ChannelModal.js","Components/MyChannel.js","Components/ScrollableChannelMessage.js","Components/SingleChannel.js","Components/ChannelBox.js","Pages/ChannelPage.js"],"sourcesContent":["import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nvar x;\nconst UserBadgeItem = ({ user1, handleFunction, admin }) => {\n  const { user } = ChatState();\n  const fn = () => {\n    return user._id === admin._id;\n  };\n  x = fn();\n  return (\n    <div>\n      {x ? (\n        <Badge\n          px={2}\n          py={1}\n          borderRadius=\"lg\"\n          m={1}\n          mb={2}\n          variant=\"solid\"\n          fontSize={12}\n          colorScheme=\"purple\"\n          cursor=\"pointer\"\n          onClick={handleFunction}\n        >\n          {user1.name}\n          {admin._id === user1._id && <span> (Admin)</span>}\n          {admin._id === user._id && <CloseIcon pl={1} />}\n        </Badge>\n      ) : (\n        <Badge\n          px={2}\n          py={1}\n          borderRadius=\"lg\"\n          m={1}\n          mb={2}\n          variant=\"solid\"\n          fontSize={12}\n          colorScheme=\"purple\"\n          cursor=\"pointer\"\n          // onClick={handleFunction}\n        >\n          {user1.name}\n          {admin._id === user1._id && <span> (Admin)</span>}\n          {admin._id === user._id && <CloseIcon pl={1} />}\n        </Badge>\n      )}\n    </div>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n// import { ChatState } from \"../../Context/ChatProvider\";\nimport React from \"react\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  // const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#2b6cb0\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { Avatar, Box, HStack, Stack, Text, useToast } from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ChannelStack = ({ fetchAgain }) => {\n  const { user, selectedChannel, setSelectedChannel, channels, setChannels } =\n    ChatState();\n  const toast = useToast();\n\n  const fetchChannels = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      // give list of chats\n      const { data } = await axios.get(\"/api/channel\", config);\n      setChannels(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the channels\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchChannels();\n  }, [fetchAgain]);\n\n  return (\n    <Stack overflowY=\"scroll\">\n      {channels.map((channel) => (\n        <Box\n          onClick={() => setSelectedChannel(channel)}\n          cursor=\"pointer\"\n          bg={selectedChannel === channel ? \"#4c6ed5\" : \"#E8E8E8\"}\n          color={selectedChannel === channel ? \"white\" : \"black\"}\n          px={3}\n          py={2}\n          borderRadius=\"lg\"\n          key={channel._id}\n        >\n          <HStack>\n            <Avatar name={channel?.channelName} size={\"sm\"}></Avatar>\n            <Text>{channel.channelName}</Text>\n          </HStack>\n        </Box>\n      ))}\n    </Stack>\n  );\n};\n\nexport default ChannelStack;\n","import {\n  Box,\n  Button,\n  FormControl,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../UserAvatar/UserBadgeItem\";\nimport UserListItem from \"../UserAvatar/UserListItem\";\n\nconst ChannelModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [channelName, setChannelName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [discription, setDiscription] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { user, channels, setChannels } = ChatState();\n\n  const toast = useToast();\n\n  // to add selected users in group\n  const handleChannel = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 1000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  // for search user\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      // console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleDiscription = () => {};\n  // for create a chat\n  const handleSubmit = async () => {\n    console.log(discription);\n    if (channelName === undefined || discription === undefined) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 2000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/channel/channelcreate`,\n        {\n          name: channelName,\n          discription: discription,\n          //   users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChannels([data, ...channels]);\n      onClose();\n      toast({\n        title: \"New Channel Created!\",\n        status: \"success\",\n        duration: 1000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Channel!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 1000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create New Channel\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Channel Name\"\n                mb={3}\n                onChange={(e) => setChannelName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Channel Description\"\n                mb={1}\n                onChange={(e) => setDiscription(e.target.value)}\n              />\n            </FormControl>\n            {/* \n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user1={u}\n                  admin={user}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 3)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleChannel(user)}\n                  />\n                ))\n            )} */}\n          </ModalBody>\n\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Channel\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ChannelModal;\n","import { AddIcon, BellIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  effect,\n  HStack,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  Stack,\n  useToast,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport ChannelStack from \"./ChannelStack\";\nimport ChatLoading from \"./ChatLoading\";\nimport ChannelModal from \"./miscellaneous/ChannelModal\";\nimport NotificationBadge from \"react-notification-badge/lib/components/NotificationBadge\";\n\nconst MyChannel = ({ fetchAgain }) => {\n  const {\n    user,\n    selectedChannel,\n    setSelectedChannel,\n    channels,\n    setChannels,\n    channelNotification,\n    setChannelNotification,\n  } = ChatState();\n  const toast = useToast();\n\n  useEffect(() => {\n    fetchChannels();\n    // console.log(\"notif \", channelNotification);\n  }, [fetchAgain]);\n\n  const fetchChannels = async () => {\n    // setSelectedChat(chatSelect);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      // give list of chats\n      const { data } = await axios.get(\"/api/channel\", config);\n\n      setChannels(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the channels\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n  return (\n    <Box\n      display={{ base: selectedChannel ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      // alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"22%\" }}\n      //   borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      h={\"100%\"}\n    >\n      <Box justifyContent={\"space-between\"}>\n        <Stack\n          direction={\"row\"}\n          justifyContent={\"space-between\"}\n          // display={\"flex\"}\n        >\n          <Box\n            pb={3}\n            px={3}\n            fontSize={{ base: \"28px\", md: \"25px\" }}\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            w=\"100%\"\n          >\n            Channels\n          </Box>\n          <Box>\n            <Menu>\n              <MenuButton p=\"1\">\n                <NotificationBadge\n                  count={channelNotification.length}\n                  effect={effect.SCALE}\n                />\n                <BellIcon fontSize=\"2xl\" m=\"1\" />\n              </MenuButton>\n              {/* if notification lengh is 0 then display no new notification */}\n              <MenuList pl={4}>\n                {/* {!notification.length && \"No new Messages\"} */}\n\n                {/* {!notification.length && \"No New Messages\"} */}\n                {channelNotification.map((notif) => (\n                  <MenuItem\n                    key={notif._id}\n                    onClick={() => {\n                      setSelectedChannel(notif.channel);\n                      setChannelNotification(\n                        channelNotification.filter((n) => n !== notif)\n                      );\n                    }}\n                  >\n                    {`Video Call from ${notif.channel.channelName}`}\n                    {/* <div>Video Call from</div> */}\n                  </MenuItem>\n                ))}\n              </MenuList>\n            </Menu>\n          </Box>\n        </Stack>\n      </Box>\n\n      <Box\n        display=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {/* if there is chat then display chats other show chatloading */}\n\n        {channels ? <ChannelStack fetchAgain={fetchAgain} /> : <ChatLoading />}\n      </Box>\n      <Box justifyContent={\"center\"} display={\"flex\"}>\n        <ChannelModal>\n          <Button\n            bg=\"\"\n            display=\"flex\"\n            fontSize={{ base: \"17px\", md: \"13px !important\", lg: \"17px\" }}\n            leftIcon={<AddIcon />}\n          >\n            New Channel\n          </Button>\n        </ChannelModal>\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChannel;\n","import { Avatar, Box, TagLeftIcon, Text, Tooltip } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport \"./styles.css\";\r\nimport moment from \"moment-timezone\";\r\n\r\nconst ScrollableChannelMessage = ({ messages }) => {\r\n  const { user } = ChatState();\r\n  const actualDate=(Datetime)=>{\r\n    let date_ob = new Date(Datetime);\r\n    const date = new Date();\r\n   const offset = -moment.tz(date, user.timeZone).utcOffset();\r\n\r\n    // const options = { timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone };\r\n    date_ob.setMinutes(date_ob.getMinutes()-offset)\r\n\r\n    let day = (\"0\" + date_ob.getDate()).slice(-2);\r\n  \r\n    // // current month\r\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\r\n  \r\n    // // current year\r\n    let year = date_ob.getFullYear();\r\n  \r\n    // // current hours\r\n    let hours = (\"0\" + date_ob.getHours()).slice(-2);\r\n  \r\n    // // current minutes\r\n    let minutes = (\"0\" + date_ob.getMinutes()).slice(-2);\r\n  \r\n    // // current seconds\r\n    \r\n  \r\n    // DD/MM/YYYY HH:MM\r\n    let curr = day+'/'+month+'/'+year+' '+hours+':'+minutes;\r\n    // console.log(date_ob)\r\n    return curr;\r\n  };\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map(\r\n          (m, i) =>\r\n            (m.content !== \"Video call\" && (\r\n              <Box style={{ display: \"flex\" }} key={m._id} ml={10}>\r\n                <Tooltip\r\n                  label={m.sender.name}\r\n                  placement=\"bottom-start\"\r\n                  hasArrow\r\n                >\r\n                  <Avatar\r\n                    mt=\"25px\"\r\n                    mr={1}\r\n                    size=\"sm\"\r\n                    cursor=\"pointer\"\r\n                    name={m.sender.name}\r\n                    src={m.sender.pic}\r\n                  />\r\n                </Tooltip>\r\n\r\n                <span\r\n                  style={{\r\n                    backgroundColor: `${m.title ? \"#BEE3F8\" : \"#B9F5D0\"}`,\r\n                    marginLeft: 20,\r\n                    marginTop: 20,\r\n                    padding: \"5px 15px\",\r\n                    width: \"78%\",\r\n                    maxWidth: \"80%\",\r\n                  }}\r\n                >\r\n                <div style={{display:\"flex\", justifyContent:\"space-between\"}}>\r\n                  <Box fontWeight={\"semibold\"} fontSize={\"sm\"}>\r\n                    {m.sender.name}\r\n                  </Box>\r\n                  <Box key={m._id}>\r\n                  {actualDate(m?.time)}\r\n                  </Box>\r\n                  </div>\r\n                  <Box\r\n                    ml={2}\r\n                    fontWeight={\"bold\"}\r\n                    color=\"red.600\"\r\n                    fontSize={\"xl\"}\r\n                  >\r\n                    {m.title}\r\n                  </Box>\r\n                  <Box ml={2}>{m.content}</Box>\r\n                </span>\r\n              </Box>\r\n            )) ||\r\n            (m.content === \"Video call\" && (\r\n              <Box display=\"flex\" justifyContent=\"center\">\r\n                <h1>\r\n                  <Text alignItems={\"center\"} color=\"#4c6ed5\" padding=\"0 10px\">\r\n                    {m.sender.name && `${m.sender.name} started video call`}\r\n                  </Text>\r\n                </h1>\r\n              </Box>\r\n            ))\r\n        )}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChannelMessage;\r\n","\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Box,\n  Button,\n  FormControl,\n  HStack,\n  IconButton,\n  Input,\n  Spinner,\n  Text,\n  useDisclosure,\n  useToast,\n  Stack,\n  Avatar,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Badge,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { AddIcon, ArrowBackIcon, Icon } from \"@chakra-ui/icons\";\nimport {\n  MdAttachFile,\n  MdManageAccounts,\n  MdVideoCall,\n  MdGroupAdd,\n} from \"react-icons/md\";\nimport { FaBloggerB } from \"react-icons/fa\";\nimport { TiDelete } from \"react-icons/ti\";\nimport { RiDeleteBin6Fill } from \"react-icons/ri\";\n\nimport { useHistory } from \"react-router-dom\";\nimport UserListItem from \"./UserAvatar/UserListItem\";\nimport ScrollableChannelMessage from \"./ScrollableChannelMessage\";\n\n\nvar  selectedChannelCompare;\nconst SingleChannel = ({ fetchAgain, setFetchAgain }) => {\n  const {\n    selectedChannel,\n    setSelectedChannel,\n    user,\n    channelNotification,\n    setChannelNotification,\n    socket\n  } = ChatState();\n  const modalDisclosure = useDisclosure();\n  const alertDisclosure = useDisclosure();\n  const postDisclosure = useDisclosure();\n\n  const [loading, setLoading] = useState(false);\n  const [selectedItem, setSelectedItem] = useState(\"Chats\");\n  const [videoCallOn, setVideoCallOn] = useState(false);\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [postTitle, setPostTitle] = useState();\n  const [postMessage, setPostMessage] = useState();\n  const [message, setMessage] = useState([]);\n  const [newMessage, setNewMessage] = useState([]);\n\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n\n  const toast = useToast();\n  const history = useHistory();\n\n  const handleClick = (component) => {\n    setSelectedItem(component);\n  };\n  useEffect(()=>{\n    console.log(selectedChannel)\n    socket.emit(\"isVideoOn\",selectedChannel?._id);\n    socket.on(\"VideoOn\",(res)=>setVideoCallOn(res))\n  },[selectedChannel])\n  const fetchMessages = async () => {\n    if (!selectedChannel) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/channelmessage/${selectedChannel._id}`,\n        config\n      );\n      setMessage(data);\n\n      setLoading(false);\n\n      socket.emit(\"join channel\", selectedChannel._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Post\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    // if enter key is pressed and newMessage is typed\n\n    if (event.key === \"Enter\" && newMessage) {\n      // socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        setNewMessage(\"\");\n        // const cipherText = CryptoJS.AES.encrypt(\n        //   newMessage,\n        //   String(selectedChannel._id)\n        // ).toString();\n        const { data } = await axios.post(\n          \"/api/channelmessage\",\n          {\n            content: newMessage,\n            channelId: selectedChannel,\n          },\n          config\n        );\n\n        console.log(\"new msgsss \", data);\n\n        socket.emit(\"new channelmessage\", data);\n        setMessage([...message, data]);\n      } catch (error) {\n        console.log(\"errr\", error);\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  const sendNotification = async () => {\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/channelmessage\",\n        {\n          content: \"Video call\",\n          channelId: selectedChannel,\n        },\n        config\n      );\n\n      console.log(\"new msgsss \", data);\n      socket.emit(\"new channelmessage\", data);\n\n      socket.emit(\"group video\", data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to send the Message\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n  // for delete a user\n  const handleRemove = async (user1) => {\n    if (\n      selectedChannel.channelAdmin._id !== user._id &&\n      user1._id !== user._id\n    ) {\n      toast({\n        title: \"Only admin can remove a user!\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/channel/channelremoveuser`,\n        {\n          channelId: selectedChannel._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      // if logged in user is admin and remove him self then we don't want that a user see a group as he left group\n      user1._id === user._id ? setSelectedChannel() : setSelectedChannel(data);\n      setFetchAgain(!fetchAgain);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  // handle user , handleadd user and handle search for add user\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleUser = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 1000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleAddUser = async () => {\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/channel/channeladduser`,\n        {\n          channelId: selectedChannel._id,\n          userId: selectedUsers.map((u) => u._id),\n        },\n        config\n      );\n\n      setSelectedChannel(data);\n      modalDisclosure.onClose();\n      setSelectedUsers([]);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 2000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  // for delete channel\n  const deleteHandler = async () => {\n    console.log(user.token);\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      console.log(\"in delete\");\n      const data = await axios.put(\n        `/api/channel/channeldelete`,\n        {\n          channelId: selectedChannel._id,\n        },\n        config\n      );\n\n      console.log(\"in delete 2\");\n      window.location.reload();\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const startVideoCall = async () => {\n    socket.emit(\"join video\", selectedChannel._id, user.name,user._id);\n    if (!videoCallOn) {\n      socket.emit(\n        \"show calling\",\n        selectedChannel._id,\n        user._id,\n        selectedChannel\n      );\n      sendNotification();\n    }\n    history.push(\"/video-call\");\n  };\n\n  const createPost = async () => {\n    if (postTitle === undefined || postMessage === undefined) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 2000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/channelmessage`,\n        {\n          channelId: selectedChannel._id,\n          content: postMessage,\n          title: postTitle,\n        },\n        config\n      );\n      socket.emit(\"new channelmessage\", data);\n\n      setMessage([...message, data]);\n\n      postDisclosure.onClose();\n    } catch (error) {\n      toast({\n        title: \"Error Occured\",\n        description: \"Failed to create the post\",\n        status: \"error\",\n        duration: 1000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    socket.emit(\"setup\", user);\n\n    socket.on(\"connected\", () => setSocketConnected(true));\n\n    socket.on(\"show calling\", () => setVideoCallOn(true));\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"group video recieved\", (channel) => {\n      setChannelNotification([channel, ...channelNotification]);\n      console.log(\"ch\", channel);\n      // console.log(\"selected \", channelNotification);\n    });\n  });\n\n  useEffect(() => {\n    socket.on(\"channelmessage recieved\", (newMessageRecieved) => {\n      setMessage([...message, newMessageRecieved]);\n    });\n  });\n\n  useEffect(() => {\n    fetchMessages();\n    selectedChannelCompare = selectedChannel;\n  }, [selectedChannel]);\n\n  return (\n    <>\n      {selectedChannel ? (\n        <>\n          <Box width=\"100%\" m={0} bg={\"#fffff\"} borderBottomWidth=\"2px\">\n            <Text\n              justifyContent={\"center\"}\n              w=\"100%\"\n              display={\"flex\"}\n              fontSize={\"2xl\"}\n              fontWeight={\"semibold\"}\n            >\n              {selectedChannel.channelName}\n            </Text>\n            <Text\n              justifyContent={\"center\"}\n              w=\"100%\"\n              display={\"flex\"}\n              fontSize={\"md\"}\n              fontWeight={\"light\"}\n            >\n              {selectedChannel.discription}\n            </Text>\n            <Stack\n              spacing={5}\n              mt={1}\n              direction={\"row\"}\n              justifyContent={\"center\"}\n              // justifyContent={\"space-between\"}\n            >\n              <Box\n                onClick={() => {\n                  handleClick(\"Chats\");\n                }}\n                display=\"flex\"\n                cursor=\"pointer\"\n                color={\"black\"}\n                key={1}\n                // ml={10}\n                w={\"4.5%\"}\n                style={{\n                  borderBottomColor:\n                    selectedItem === \"Chats\" ? \"#4c6ed5\" : \"#ffffff\",\n                  borderBottomWidth: selectedItem === \"Chats\" ? \"3px\" : \"0px\",\n                }}\n              >\n                <Icon\n                  as={FaBloggerB}\n                  ml={{ md: 3, sm: 3, base: 3 }}\n                  boxSize={{ md: 6, sm: 5, base: 5 }}\n                  h={{ md: 12, sm: 12, base: 12 }}\n                />\n              </Box>\n\n              <Box\n                onClick={() => {\n                  handleClick(\"Channel\");\n                }}\n                display=\"flex\"\n                cursor={\"pointer\"}\n                color={\"black\"}\n                key={2}\n                w={\"4.5%\"}\n                style={{\n                  borderBottomColor:\n                    selectedItem === \"Channel\" ? \"#4c6ed5\" : \"#ffffff\",\n                  borderBottomWidth: selectedItem === \"Channel\" ? \"3px\" : \"0px\",\n                }}\n              >\n                <Icon\n                  as={MdManageAccounts}\n                  ml={{ md: 3, sm: 3, base: 3 }}\n                  boxSize={{ md: 6, sm: 5, base: 5 }}\n                  h={{ md: 12, sm: 12, base: 12 }}\n                />\n              </Box>\n\n              <Button\n                leftIcon={<MdVideoCall />}\n                onClick={startVideoCall}\n                // colorScheme={videoCallOn ? \"green\" : \"red\"}\n                _hover={{ backgroundColor: \"green\", color: \"#ffffff\" }}\n                size={\"lg\"}\n                bg={videoCallOn ? \"red\" : \"#ffffff\"}\n                // bg={liveMember !== \"0\" ? \"red\" : \"#ffffff\"}\n                color={videoCallOn ? \"white\" : \"black\"}\n                // style={videoCallOn ? colorScheme : \"red\"}\n              >\n                Meet\n              </Button>\n            </Stack>\n          </Box>\n\n          <HStack\n            justifyContent={\"start\"}\n            display=\"flex\"\n            w=\"100%\"\n            mt={2}\n            mb={2}\n          >\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChannel(\"\")}\n            />\n          </HStack>\n\n          {selectedItem === \"Chats\" && (\n            <Box\n              display=\"flex\"\n              flexDir=\"column\"\n              justifyContent=\"flex-end\"\n              p={3}\n              bg=\"#E8E8E8\"\n              w=\"100%\"\n              h=\"100%\"\n              borderRadius=\"lg\"\n              overflowY=\"hidden\"\n            >\n              {/* Messages ui */}\n              {loading ? (\n                <Spinner\n                  size=\"xl\"\n                  w={20}\n                  h={20}\n                  alignSelf=\"center\"\n                  margin=\"auto\"\n                />\n              ) : (\n                // {/* messages */}\n                <div className=\"messages\">\n                  <ScrollableChannelMessage messages={message} />\n                </div>\n              )}\n\n              <FormControl\n                onKeyDown={sendMessage}\n                id=\"first-name\"\n                isRequired\n                mt={5}\n              >\n                <HStack>\n                  <Button\n                    display=\"flex\"\n                    colorScheme=\"blue\"\n                    fontSize={{\n                      base: \"17px\",\n                      md: \"13px !important\",\n                      lg: \"17px\",\n                    }}\n                    onClick={postDisclosure.onOpen}\n                    leftIcon={<AddIcon />}\n                  >\n                    New Post\n                  </Button>\n                  <Input\n                    width={\"85%\"}\n                    variant=\"filled\"\n                    bg=\"#E0E0E0\"\n                    placeholder=\"Enter a message...\"\n                    onChange={(e) => {\n                      setNewMessage(e.target.value);\n                    }}\n                    value={newMessage}\n                  />\n\n                  <Modal\n                    onClose={postDisclosure.onClose}\n                    isOpen={postDisclosure.isOpen}\n                    isCentered\n                  >\n                    <ModalOverlay />\n                    <ModalContent>\n                      <ModalHeader\n                        fontSize=\"35px\"\n                        fontFamily=\"Work sans\"\n                        display=\"flex\"\n                        justifyContent=\"center\"\n                      >\n                        Create New Post\n                      </ModalHeader>\n                      <ModalCloseButton />\n                      <ModalBody\n                        display=\"flex\"\n                        flexDir=\"column\"\n                        alignItems=\"center\"\n                      >\n                        <FormControl>\n                          <Input\n                            placeholder=\"Post Heading\"\n                            mb={3}\n                            onChange={(e) => setPostTitle(e.target.value)}\n                          />\n                        </FormControl>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Post Message\"\n                            mb={1}\n                            onChange={(e) => setPostMessage(e.target.value)}\n                          />\n                        </FormControl>\n                      </ModalBody>\n\n                      <ModalFooter>\n                        <Button onClick={createPost} colorScheme=\"blue\">\n                          Send\n                        </Button>\n                      </ModalFooter>\n                    </ModalContent>\n                  </Modal>\n                  <IconButton\n                    icon={<MdAttachFile />}\n                    colorScheme=\"blue\"\n                    variant=\"solid\"\n                  ></IconButton>\n                </HStack>\n              </FormControl>\n            </Box>\n          )}\n\n          {selectedItem === \"Channel\" && (\n            <Box\n              pb={3}\n              px={3}\n              fontSize={{ base: \"18px\", md: \"18px\" }}\n              fontFamily=\"Work sans\"\n              // display=\"flex\"\n              w=\"100%\"\n              // justifyContent=\"space-between\"\n              // alignItems=\"center\"\n            >\n              <Box mt={1}>\n                <Stack direction={\"column\"}>\n                  <Text\n                    justifyContent={\"center\"}\n                    w=\"100%\"\n                    fontSize={{ base: \"28px\", md: \"28px\" }}\n                    display={\"flex\"}\n                  >\n                    Members\n                  </Text>\n\n                  <Stack direction={\"row\"} justifyContent={\"space-between\"}>\n                    {user._id === selectedChannel.channelAdmin._id && (\n                      <Button\n                        leftIcon={<MdGroupAdd />}\n                        bg=\"#4c6ed5\"\n                        color={\"#ffffff\"}\n                        _hover={{\n                          backgroundColor: \"#3953a2\",\n                          color: \"#ffffff\",\n                        }}\n                        onClick={modalDisclosure.onOpen}\n                      >\n                        Add Member\n                      </Button>\n                    )}\n\n                    <Modal\n                      onClose={() => {\n                        modalDisclosure.onClose();\n                        setSelectedUsers([]);\n                      }}\n                      isOpen={modalDisclosure.isOpen}\n                      isCentered\n                    >\n                      <ModalOverlay />\n                      <ModalContent>\n                        <ModalHeader\n                          fontSize=\"35px\"\n                          fontFamily=\"Work sans\"\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                        >\n                          {selectedChannel.channelName}\n                        </ModalHeader>\n\n                        <ModalCloseButton />\n\n                        <ModalBody\n                          display=\"flex\"\n                          flexDir=\"column\"\n                          alignItems=\"center\"\n                        >\n                          <FormControl>\n                            <Input\n                              placeholder=\"Add Users\"\n                              mb={1}\n                              onChange={(e) => handleSearch(e.target.value)}\n                            />\n                          </FormControl>\n\n                          <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\n                            {selectedUsers.map((u) => (\n                              <Badge\n                                px={2}\n                                py={1}\n                                borderRadius=\"lg\"\n                                m={1}\n                                mb={2}\n                                variant=\"solid\"\n                                fontSize={12}\n                                colorScheme=\"purple\"\n                                cursor=\"pointer\"\n                              >\n                                {u.name}\n                              </Badge>\n                            ))}\n                          </Box>\n\n                          {loading ? (\n                            // <ChannelLoading />\n                            <div>Loading...</div>\n                          ) : (\n                            searchResult\n                              ?.slice(0, 3)\n                              .map((user) => (\n                                <UserListItem\n                                  key={user._id}\n                                  user={user}\n                                  handleFunction={() => handleUser(user)}\n                                />\n                              ))\n                          )}\n                        </ModalBody>\n\n                        <ModalFooter>\n                          <Button onClick={handleAddUser} colorScheme=\"blue\">\n                            Add User\n                          </Button>\n                        </ModalFooter>\n                      </ModalContent>\n                    </Modal>\n\n                    {user._id === selectedChannel.channelAdmin._id && (\n                      <Button\n                        leftIcon={<RiDeleteBin6Fill />}\n                        _hover={{\n                          backgroundColor: \"#cc0000\",\n                          color: \"#ffffff\",\n                        }}\n                        onClick={alertDisclosure.onOpen}\n                      >\n                        Delete Channel\n                      </Button>\n                    )}\n\n                    <AlertDialog\n                      isOpen={alertDisclosure.isOpen}\n                      onClose={alertDisclosure.onClose}\n                      isCentered\n                    >\n                      <AlertDialogOverlay>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>Delete Channel</AlertDialogHeader>\n                          <AlertDialogBody>\n                            {\"Are you sure want to delete channel?\"}\n                          </AlertDialogBody>\n                          <AlertDialogFooter>\n                            <Button onClick={alertDisclosure.onClose} ml={3}>\n                              NO\n                            </Button>\n                            <Button\n                              onClick={deleteHandler}\n                              colorScheme=\"red\"\n                              ml={3}\n                            >\n                              YES\n                            </Button>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialogOverlay>\n                    </AlertDialog>\n                  </Stack>\n                </Stack>\n              </Box>\n\n              <Box\n                display=\"flex\"\n                flexDir=\"column\"\n                p={3}\n                w=\"100%\"\n                h=\"100%\"\n                borderRadius=\"lg\"\n                overflowY=\"hidden\"\n              >\n                {selectedChannel.users.map((u) => (\n                  <Box\n                    // cursor=\"pointer\"\n                    px={3}\n                    py={2}\n                    h={47}\n                    bg=\"#F8F8F8\"\n                    borderRadius=\"lg\"\n                    key={u._id}\n                    mb={2}\n                  >\n                    <Stack direction={\"row\"} justifyContent={\"space-between\"}>\n                      <HStack>\n                        {u?.pic ? (\n                          <Avatar\n                            size=\"sm\"\n                            cursor=\"pointer\"\n                            name={u?.name}\n                            src={u?.pic}\n                            ml={2}\n                          />\n                        ) : (\n                          <Avatar\n                            size=\"sm\"\n                            cursor=\"pointer\"\n                            name={u?.name}\n                            ml={2}\n                          />\n                        )}\n                        {/* <Text>{u.name}</Text> */}\n                        {u._id === selectedChannel.channelAdmin._id ? (\n                          <Text>{u.name} (Admin)</Text>\n                        ) : (\n                          <Text>{u.name}</Text>\n                        )}\n                      </HStack>\n                      {user._id === selectedChannel.channelAdmin._id && (\n                        <Icon\n                          as={TiDelete}\n                          cursor={\"pointer\"}\n                          boxSize={6}\n                          onClick={() => handleRemove(u)}\n                        />\n                      )}\n                    </Stack>\n                  </Box>\n                ))}\n              </Box>\n            </Box>\n          )}\n        </>\n      ) : (\n        // if channel not seleced\n\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          h=\"100%\"\n        >\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a channel\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChannel;\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport SingleChannel from \"./SingleChannel\";\n\nconst ChannelBox = ({ fetchAgain, setFetchAgain }) => {\n  const { user, selectedChannel, setSelectedChannel } = ChatState();\n  return (\n    <Box\n      display={{ base: selectedChannel ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"77.8%\" }}\n      // borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChannel fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default ChannelBox;\n","import { Box } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport MyChannel from \"../Components/MyChannel\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport ChannelBox from \"../Components/ChannelBox\";\n\nconst ChannelPage = () => {\n  const { user, setUser } = ChatState();\n  const [fetchAgain, setFetchAgain] = useState(false);\n  return (\n    <div style={{ width: \"100%\" }}>\n      <Box\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        w=\"100%\"\n        h=\"100vh\"\n        pl=\"3px\"\n      >\n        {user && <MyChannel fetchAgain={fetchAgain} />}\n        {user && (\n          <ChannelBox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default ChannelPage;\n"],"names":["x","user1","handleFunction","admin","user","ChatState","_id","px","py","borderRadius","m","mb","variant","fontSize","colorScheme","cursor","onClick","name","pl","bg","_hover","background","color","w","d","alignItems","mr","size","src","pic","email","fetchAgain","selectedChannel","setSelectedChannel","channels","setChannels","toast","useToast","fetchChannels","config","headers","Authorization","token","axios","data","title","description","status","duration","isClosable","position","useEffect","overflowY","map","channel","channelName","children","useDisclosure","isOpen","onOpen","onClose","useState","setChannelName","discription","setDiscription","handleSubmit","console","log","undefined","response","isCentered","fontFamily","display","justifyContent","flexDir","I","placeholder","onChange","e","target","value","channelNotification","setChannelNotification","base","md","p","borderWidth","h","direction","pb","NotificationBadge","count","length","effect","notif","filter","n","ChatLoading","lg","leftIcon","messages","actualDate","Datetime","date_ob","Date","date","offset","moment","timeZone","utcOffset","setMinutes","getMinutes","getDate","slice","getMonth","getFullYear","getHours","i","content","style","ml","label","sender","placement","hasArrow","mt","backgroundColor","marginLeft","marginTop","padding","width","maxWidth","fontWeight","time","setFetchAgain","socket","modalDisclosure","alertDisclosure","postDisclosure","loading","setLoading","selectedItem","setSelectedItem","videoCallOn","setVideoCallOn","setSocketConnected","postTitle","setPostTitle","postMessage","setPostMessage","message","setMessage","newMessage","setNewMessage","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","history","useHistory","handleClick","component","emit","on","res","fetchMessages","sendMessage","event","key","channelId","sendNotification","handleRemove","channelAdmin","userId","handleSearch","query","handleAddUser","u","deleteHandler","window","location","reload","startVideoCall","push","createPost","newMessageRecieved","borderBottomWidth","spacing","borderBottomColor","as","FaBloggerB","sm","boxSize","MdManageAccounts","icon","alignSelf","margin","className","onKeyDown","id","isRequired","flexWrap","UserListItem","userToAdd","includes","users","TiDelete","setUser"],"sourceRoot":""}